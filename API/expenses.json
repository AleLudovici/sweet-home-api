{
  "openapi" : "3.0.0",
  "servers" : [ {
    "description" : "SwaggerHub API Auto Mocking",
    "url" : "https://virtserver.swaggerhub.com/aleludovici/expenses/1.0.0"
  } ],
  "info" : {
    "version" : "1.0.0",
    "title" : "SweetHome app expenses",
    "description" : "The API to interact with sweet home app expenses."
  },
  "components" : {
    "schemas" : {
      "expenses" : {
        "type" : "object",
        "properties" : {
          "expenses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/expense"
            }
          }
        }
      },
      "expense" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The expense ID"
          },
          "date" : {
            "type" : "string",
            "format" : "date",
            "description" : "The day of the expense"
          },
          "amount" : {
            "type" : "number",
            "format" : "double",
            "description" : "How much was the expense"
          },
          "currency" : {
            "type" : "string",
            "description" : "The currency of the expense"
          },
          "author" : {
            "$ref" : "#/components/schemas/author"
          },
          "location" : {
            "$ref" : "#/components/schemas/location"
          }
        }
      },
      "author" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The user ID correspondent to the author of the expense"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the author of the expense"
          },
          "lastname" : {
            "type" : "string",
            "description" : "The last name of the author of the expense"
          }
        }
      },
      "location" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The name of the shop/business"
          },
          "description" : {
            "type" : "string",
            "description" : "What did you buy"
          }
        }
      },
      "error" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The error code."
          },
          "message" : {
            "type" : "string",
            "description" : "The error message."
          }
        },
        "required" : [ "code", "message" ]
      }
    },
    "requestBodies" : {
      "expenseBody" : {
        "description" : "A JSON containg an expense.",
        "required" : true,
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/expense"
            }
          }
        }
      }
    },
    "responses" : {
      "notFound" : {
        "description" : "The specified resource was not found.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/error"
            }
          }
        }
      },
      "invalid" : {
        "description" : "The request was invalid.",
        "content" : {
          "application/json" : {
            "schema" : {
              "$ref" : "#/components/schemas/error"
            }
          }
        }
      },
      "created" : {
        "description" : "Created",
        "headers" : {
          "Content-location" : {
            "schema" : {
              "type" : "string"
            },
            "description" : "Path of the created resource"
          }
        }
      }
    }
  },
  "paths" : {
    "/expenses" : {
      "get" : {
        "summary" : "Returns a list of expenses for an interval of time.",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "The number of expenses to return",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "minimum" : 1,
            "maximum" : 50,
            "default" : 25
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of expense to skip before starting to collect the result set.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "minimum" : 0,
            "default" : 0
          }
        }, {
          "name" : "start_date",
          "in" : "query",
          "description" : "The start date for the expenses.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "end_date",
          "in" : "query",
          "description" : "The end date for the expenses.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/expenses"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/invalid"
          }
        }
      },
      "post" : {
        "summary" : "Add a new expense.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/expenseBody"
        },
        "responses" : {
          "201" : {
            "$ref" : "#/components/responses/created"
          },
          "400" : {
            "$ref" : "#/components/responses/invalid"
          }
        }
      }
    },
    "/expenses/{expenseId}" : {
      "parameters" : [ {
        "in" : "path",
        "name" : "expenseId",
        "required" : true,
        "schema" : {
          "type" : "integer",
          "minimum" : 1
        },
        "description" : "ID of the expense to get"
      } ],
      "get" : {
        "summary" : "Returns an expense by ID.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/expense"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/invalid"
          },
          "404" : {
            "$ref" : "#/components/responses/notFound"
          }
        }
      },
      "put" : {
        "summary" : "Update an existing expense.",
        "requestBody" : {
          "$ref" : "#/components/requestBodies/expenseBody"
        },
        "responses" : {
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/expense"
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/invalid"
          },
          "404" : {
            "$ref" : "#/components/responses/notFound"
          }
        }
      }
    }
  }
}